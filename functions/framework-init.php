<?php
/***************************************************************************/
/*
/* 	----------------------------------------------------------------------
/* 								DO NOT EDIT THIS FILE
/*	----------------------------------------------------------------------
/* 
/*				Huge thanks to @devinsays for the Theme Options Framework 
/*				(https://github.com/devinsays/options-framework-plugin)
/*										
/*									@since 1.6
/*									@alter 1.6
/***************************************************************************/

// Set error reporting
//error_reporting(E_ERROR);

// Create the notification container
global $aiesec_notification;
$aiesec_notification = '';

// Array of theme data stored in style.css
$theme_data = get_theme_data(TEMPLATEPATH . '/style.css');

// Theme name - used for checking for updates
global $aiesec_theme_name, $aiesec_theme_version;
$aiesec_theme_name = $theme_data['Name'];
$aiesec_theme_version = $theme_data['Version'];

/*-----------------------------------------------------------------------------------
 			Add default options and show Options Panel after activate  
-----------------------------------------------------------------------------------*/
if (is_admin() && isset($_GET['activated'] ) && $pagenow == "themes.php" ) {
	//Do redirect
	header( 'Location: '.admin_url().'themes.php?page=options-framework' ) ;
}

/* 
 * Overwrite the of_get_option function of the
 * admin options framework for backwards compatibility 
 * 
 * @since 1.6.0
 */
function of_get_option($name, $default = false) {
	$optionsframework_settings = get_option('optionsframework');
	
	// Gets the unique option id
	$option_name = $optionsframework_settings['id'];

	if ( get_option($option_name) ) {
		$options = get_option($option_name);
	}
	
	if ( !empty($options[$name]) && $options[$name] != 'false') {
		return $options[$name];
	} elseif(get_option('aiesec_'.$name)){
		return get_option('aiesec_'.$name);
	} else {
		return $default;
	}
}

/* 
 * Overwrite the optionsframework_page function of the
 * admin options framework to add theme related links 
 * 
 * @since 1.6.0
 */
function optionsframework_page() {
	
	global $aiesec_theme_name, $aiesec_theme_version, $aiesec_notification;
	$optionsframework_settings = get_option('optionsframework');
	
	// Display message when options are reset/updated
	$message = '';
	
	if ( isset($optionsframework_settings['message']) ) {
		$message = $optionsframework_settings['message'];
	}
	
	if ( $message == 'reset' ) {
		$message = __( 'Options reset.' );
	}
	if ( $message == 'update' ) {
		$message = __( 'Options updated.' );
	}
	
	// Sets the option back to null, so the message doesn't display on refresh
	$optionsframework_settings['message'] = '';
	update_option('optionsframework',$optionsframework_settings)
	?>
    
	<div class="wrap">
    <?php screen_icon( 'themes' ); ?>
	<h2><?php _e('Theme Options'); ?></h2>
    
    <?php if ($message) { ?>
    	<div id="message" class="updated fade"><p><strong><?php echo $message; ?></strong></p></div>
    <?php } ?>
    <?php if($aiesec_notification){ ?>
    	<div class="update-message notification"><?php echo $aiesec_notification; ?></div>
    <?php } ?>
    
    <div id="of_container">
       <form action="options.php" method="post">
	  <?php settings_fields('optionsframework'); ?>

        <div id="header">
          <div class="logo">
            <h2><?php echo $aiesec_theme_name; ?><sup>v<?php echo $aiesec_theme_version; ?></sup></h2>
          </div>
          <!--  (Coming soon)
          <ul>
        		<li><a href="#" target="_blank" class="support-link">Support</a></li>
        		<li><a href="#" target="_blank" class="docs-link">Documentation</a></li>
        		<li><a href="#" target="_blank" class="tips-link">Tips &amp; Tricks</a></li>

          </ul>
          -->
          <div class="clear"></div>
        </div>
        
        <div id="main">
        <?php $return = optionsframework_fields(); ?>
          <div id="of-nav">
            <ul>
              <?php echo $return[1]; ?>
            </ul>
          </div>
          <div id="content">
            <?php echo $return[0]; /* Settings */ ?>
          </div>
          <div class="clear"></div>
        </div>
        <div class="of_admin_bar">
			<input type="submit" class="button-primary" name="update" value="<?php _e( 'Save Options' ); ?>" />
            </form>
            
            <input type="submit" class="reset-button button-secondary" name="reset" value="<?php _e('Restore Defaults')?>" onclick="return confirm('Click OK to reset. Any theme settings will be lost!');"/>
		</div>
<div class="clear"></div>
</div> <!-- / #container -->  
</div> <!-- / .wrap -->

<?php
}

/** 
 * aiesec_xml2array()
 * Create the XML needed to check for theme updates
 *
 * http://mysrc.blogspot.com/2007/02/php-xml-to-array-and-backwards.html
 * @since 1.5
**/
function aiesec_xml2array(&$string) {
	$parser = xml_parser_create();
	xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
	xml_parse_into_struct($parser, $string, $vals, $index);
	xml_parser_free($parser);
	$mnary=array();
	$ary=&$mnary;
	foreach ($vals as $r) {
		$t=$r['tag'];
		if ($r['type']=='open') {
			if (isset($ary[$t])) {
				if (isset($ary[$t][0])) $ary[$t][]=array(); else $ary[$t]=array($ary[$t], array());
				$cv=&$ary[$t][count($ary[$t])-1];
			} else $cv=&$ary[$t];
			if (isset($r['attributes'])) {foreach ($r['attributes'] as $k=>$v) $cv['_a'][$k]=$v;}
			$cv['_c']=array();
			$cv['_c']['_p']=&$ary;
			$ary=&$cv['_c'];
		} elseif ($r['type']=='complete') {
			if (isset($ary[$t])) { // same as open
				if (isset($ary[$t][0])) $ary[$t][]=array(); else $ary[$t]=array($ary[$t], array());
				$cv=&$ary[$t][count($ary[$t])-1];
			} else $cv=&$ary[$t];
			if (isset($r['attributes'])) {foreach ($r['attributes'] as $k=>$v) $cv['_a'][$k]=$v;}
			$cv['_v']=(isset($r['value']) ? $r['value'] : '');

		} elseif ($r['type']=='close') {
			$ary=&$ary['_p'];
		}
	}    
	_aiesec_del_p($mnary);
	return $mnary;
}

///////////////////////////////////////////
// _Internal: Remove recursion in result array
///////////////////////////////////////////
function _aiesec_del_p(&$ary) {
	foreach ($ary as $k=>$v) {
		if ($k==='_p') unset($ary[$k]);
		elseif (is_array($ary[$k])) _aiesec_del_p($ary[$k]);
	}
}

///////////////////////////////////////////
// Array to XML
///////////////////////////////////////////
function aiesec_ary2xml($cary, $d=0, $forcetag='') {
	$res=array();
	foreach ($cary as $tag=>$r) {
		if (isset($r[0])) {
			$res[]=aiesec_ary2xml($r, $d, $tag);
		} else {
			if ($forcetag) $tag=$forcetag;
			$sp=str_repeat("\t", $d);
			$res[]="$sp<$tag";
			if (isset($r['_a'])) {foreach ($r['_a'] as $at=>$av) $res[]=" $at=\"$av\"";}
			$res[]=">".((isset($r['_c'])) ? "\n" : '');
			if (isset($r['_c'])) $res[]=aiesec_ary2xml($r['_c'], $d+1);
			elseif (isset($r['_v'])) $res[]=$r['_v'];
			$res[]=(isset($r['_c']) ? $sp : '')."</$tag>\n";
		}
		
	}
	return implode('', $res);
}
///////////////////////////////////////////
// Insert element into array
///////////////////////////////////////////
function aiesec_ins2ary(&$ary, $element, $pos) {
	$ar1=array_slice($ary, 0, $pos); $ar1[]=$element;
	$ary=array_merge($ar1, array_slice($ary, $pos));
}

// Init the options framework to do work
require_once (TEMPLATEPATH . '/functions/admin-options/options-framework.php');
?>